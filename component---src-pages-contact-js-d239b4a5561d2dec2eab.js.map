{"version":3,"file":"component---src-pages-contact-js-d239b4a5561d2dec2eab.js","mappings":"yLAMMA,EAAM,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAChCC,GAAaC,EAAAA,EAAAA,eAAbD,SAGR,GAFiBE,EAAAA,EAAAA,IAAeC,GAAxBC,KASCC,aANPC,EADF,EACEA,aACAC,EAFF,EAEEA,cACAC,EAHF,EAGEA,mBACAC,EAJF,EAIEA,QACAC,EALF,EAKEA,aACAC,EANF,EAMEA,gBAGIC,EAAM,CACVhB,MAAOA,GAASU,EAChBT,YAAaA,GAAeW,EAC5BV,MAAM,GAAIW,GAAUX,GAASY,GAC7BG,IAAI,GAAIJ,EAAUT,GAGpB,OACE,gBAAC,IAAD,CAAQJ,MAAOgB,EAAIhB,MAAOW,cAAeA,GACvC,wBAAMO,KAAK,cAAcC,QAASH,EAAIf,cACtC,wBAAMiB,KAAK,QAAQC,QAASH,EAAId,QAE/Bc,EAAIC,KAAO,wBAAMG,SAAS,SAASD,QAASH,EAAIC,OAE/Cd,EAAiB,KAAS,wBAAMiB,SAAS,UAAUD,QAAQ,YAE5DH,EAAIhB,OAAS,wBAAMoB,SAAS,WAAWD,QAASH,EAAIhB,QAEpDgB,EAAIf,aACH,wBAAMmB,SAAS,iBAAiBD,QAASH,EAAIf,cAG9Ce,EAAId,OAAS,wBAAMkB,SAAS,WAAWD,QAASH,EAAId,QAErD,wBAAMgB,KAAK,eAAeC,QAAQ,wBAEjCJ,GACC,wBAAMG,KAAK,kBAAkBC,QAASJ,IAGvCC,EAAIhB,OAAS,wBAAMkB,KAAK,gBAAgBC,QAASH,EAAIhB,QAErDgB,EAAIf,aACH,wBAAMiB,KAAK,sBAAsBC,QAASH,EAAIf,cAG/Ce,EAAId,OAAS,wBAAMgB,KAAK,gBAAgBC,QAASH,EAAId,UAK5D,MASAH,EAAIsB,aAAe,CACjBrB,MAAO,KACPC,YAAa,KACbC,MAAO,KACPC,SAAS,GAGX,IAAMI,EAAK,c,6DC3BX,UA5CgB,WACd,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CACEP,MAAM,UACNC,YAAY,sGAEd,uBAAKqB,UAAU,oDACb,sBAAIC,MAAM,SAAV,WAEA,wBACEC,OAAO,OACP,mBAAiB,YACjB,eAAa,OACbN,KAAK,UACLO,GAAG,OACHC,OAAO,cAEP,yBAAOC,KAAK,SAAST,KAAK,cAC1B,yBAAOS,KAAK,SAAST,KAAK,YAAYU,MAAM,YAC5C,qBAAGH,GAAG,QACJ,2CACa,yBAAOE,KAAK,OAAOT,KAAK,WAGvC,qBAAGO,GAAG,SACJ,4CACc,yBAAOE,KAAK,QAAQT,KAAK,YAGzC,yBACE,yCACW,4BAAUA,KAAK,cAG5B,yBACE,0BAAQS,KAAK,UAAb","sources":["webpack://gatsby-starter-hello-world/./src/components/SEO.js","webpack://gatsby-starter-hello-world/./src/pages/contact.js"],"sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useLocation } from \"@reach/router\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst SEO = ({ title, description, image, article }) => {\n  const { pathname } = useLocation()\n  const { site } = useStaticQuery(query)\n\n  const {\n    defaultTitle,\n    titleTemplate,\n    defaultDescription,\n    siteUrl,\n    defaultImage,\n    twitterUsername,\n  } = site.siteMetadata\n\n  const seo = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    image: `${siteUrl}${image || defaultImage}`,\n    url: `${siteUrl}${pathname}`,\n  }\n\n  return (\n    <Helmet title={seo.title} titleTemplate={titleTemplate}>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n\n      {seo.url && <meta property=\"og:url\" content={seo.url} />}\n\n      {(article ? true : null) && <meta property=\"og:type\" content=\"article\" />}\n\n      {seo.title && <meta property=\"og:title\" content={seo.title} />}\n\n      {seo.description && (\n        <meta property=\"og:description\" content={seo.description} />\n      )}\n\n      {seo.image && <meta property=\"og:image\" content={seo.image} />}\n\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n\n      {twitterUsername && (\n        <meta name=\"twitter:creator\" content={twitterUsername} />\n      )}\n\n      {seo.title && <meta name=\"twitter:title\" content={seo.title} />}\n\n      {seo.description && (\n        <meta name=\"twitter:description\" content={seo.description} />\n      )}\n\n      {seo.image && <meta name=\"twitter:image\" content={seo.image} />}\n    </Helmet>\n  )\n}\n\nexport default SEO\n\nSEO.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  image: PropTypes.string,\n  article: PropTypes.bool,\n}\n\nSEO.defaultProps = {\n  title: null,\n  description: null,\n  image: null,\n  article: false,\n}\n\nconst query = graphql`\n  query SEO {\n    site {\n      siteMetadata {\n        defaultTitle: title\n        titleTemplate\n        defaultDescription: description\n        siteUrl: url\n        defaultImage: image\n        twitterUsername\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport Layout from \"../components/Layout\"\nimport SEO from \"../components/SEO\"\nimport \"../assets/css/contact.scss\"\n\nconst Contact = () => {\n  return (\n    <Layout>\n      <SEO\n        title=\"Contact\"\n        description=\"Feel free to contact us or visit our website for good morning, motivational, insipiration quotes.\"\n      />\n      <div className=\"container container-max contact pt-16 px-6 pb-14\">\n        <h1 class=\"pb-12\">Contact</h1>\n\n        <form\n          method=\"post\"\n          netlify-honeypot=\"bot-field\"\n          data-netlify=\"true\"\n          name=\"contact\"\n          id=\"form\"\n          action=\"/thank-you\"\n        >\n          <input type=\"hidden\" name=\"bot-field\" />\n          <input type=\"hidden\" name=\"form-name\" value=\"contact\" />\n          <p id=\"name\">\n            <label>\n              Your Name: <input type=\"text\" name=\"name\" />\n            </label>\n          </p>\n          <p id=\"email\">\n            <label>\n              Your Email: <input type=\"email\" name=\"email\" />\n            </label>\n          </p>\n          <p>\n            <label>\n              Message: <textarea name=\"message\"></textarea>\n            </label>\n          </p>\n          <p>\n            <button type=\"submit\">Send</button>\n          </p>\n        </form>\n      </div>\n    </Layout>\n  )\n}\n\nexport default Contact\n"],"names":["SEO","title","description","image","article","pathname","useLocation","useStaticQuery","query","site","siteMetadata","defaultTitle","titleTemplate","defaultDescription","siteUrl","defaultImage","twitterUsername","seo","url","name","content","property","defaultProps","className","class","method","id","action","type","value"],"sourceRoot":""}